//=============================================================================
//
// 瓦礫クラス(rubble.h)
// Author : 唐﨑結斗
// 概要 : 瓦礫生成を行う
//
//=============================================================================
#ifndef _RUBBLE_H_			// このマクロ定義がされてなかったら
#define _RUBBLE_H_			// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include <vector>
#include "objectX.h"
#include "itemObj.h"

//--------------------------------
// 前方宣言
//--------------------------------
class CLine;

//=============================================================================
// モデルオブジェクトクラス
// Author : 唐﨑結斗
// 概要 : モデルオブジェクト生成を行うクラス
//=============================================================================
class CRubble : public CObjectX
{
public:
	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static CRubble *Create();	// モデルオブジェクトの生成

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CRubble();
	~CRubble();

	//--------------------------------------------------------------------
	// アイテムの種類の列挙型
	//--------------------------------------------------------------------
	enum EBuildType
	{
		TYPE_NONE = 0,
		TYPE_PAVILION,
		TYPE_FOUNTAIN,
		MAX_TYPE,
	};

	//--------------------------------------------------------------------
	// 修理
	//--------------------------------------------------------------------
	struct REPAIR
	{
		CItemObj::EItemType type;			// アイテムタイプ
		int nRequired;						// 必要数
		int nCutRequired;					// 必要数カウント
		bool bCompletion;					// 完了
	};

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	HRESULT Init(D3DXVECTOR3 pos) override;										// 初期化
	void Uninit() override;														// 終了
	void Update() override;														// 更新
	void Draw() override;														// 描画
	void SetRepair(std::vector<REPAIR> repair) { m_repair = repair; }
	void SetRequired(int nRequired) { m_nRequired = nRequired; }
	void SetBuildType(EBuildType buildType);
	int GetRequired() { return m_nRequired; }

private:
	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	void Collision();
	void Complete();
	void SetLine();

	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	std::vector<REPAIR> m_repair;			// 修理
	CLine **m_pLine;						// ライン情報
	D3DXCOLOR m_lineCol;					// ラインの色
	EBuildType m_buildType;					// 建物のタイプ
	int m_nRequired;						// 修理数
	int m_nCntRequired;						// 修理数カウント
	bool m_bComplete;						// 完了Flag
};

#endif



