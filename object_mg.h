//=============================================================================
//
// オブジェとマネージャークラス(object_mg.h)
// Author : 唐﨑結斗
// 概要 : 3Dプレイヤー生成を行う
//
//=============================================================================
#ifndef _OBJECT_MANAGER_H_			// このマクロ定義がされてなかったら
#define _OBJECT_MANAGER_H_			// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include <vector>
#include "object.h"

//*****************************************************************************
// 前方宣言
//*****************************************************************************
class CRubble;

//=============================================================================
// 3Dプレイヤークラス
// Author : 唐﨑結斗
// 概要 : 3Dプレイヤー生成を行うクラス
//=============================================================================
class CObjectManager : public CObject
{
public:
	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static CObjectManager *Create();			// 3Dプレイヤーの生成

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CObjectManager();
	explicit CObjectManager(int nPriority);
	~CObjectManager();

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	HRESULT Init(D3DXVECTOR3 pos) override;											// 初期化
	void Uninit() override;															// 終了
	void Update() override;															// 更新
	void Draw() override;															// 描画
	void UpdateRubble();
	void SetRubble(CRubble* pRubble);
	void SetPos(D3DXVECTOR3 pos) override { m_pos = pos; }							//位置の設定
	D3DXVECTOR3 GetPosOld() override { return m_posOld; }							//位置の取得
	D3DXVECTOR3 GetPosition() override;												//位置の取得
	float GetWidth() override;														//幅の取得
	float GetHeight() override;														//高さの取得

private:
	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	std::vector<CRubble*> m_pRubble;
	D3DXVECTOR3 m_pos;					// 位置
	D3DXVECTOR3 m_posOld;				// 過去位置
	int m_nMaxRubble;
};

#endif