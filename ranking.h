//===================================================
//
// ランキングヘッダー
// Author : Sato Teruto
//
//===================================================
#ifndef _RANKING_H_
#define _RANKING_H_	//二重インクルード防止

//-------------------------------
// インクルード
//-------------------------------
#include "object.h"

//-------------------------------
// 前方宣言
//-------------------------------
class CScore;	//スコア

//================================
// ランキングクラス
//================================
class CRanking : CObject
{
public:
	CRanking();	//コンストラクタ
	~CRanking();	//デストラクタ

	//------------------
	// メンバ関数
	//------------------
	HRESULT Init(D3DXVECTOR3 pos);
	void Uninit();
	void Update();
	void Draw();

	void Save();
	void Load();
	void Ranking();

	//----------------
	// セッター
	//----------------
	static void SetNewTime(int nScore) { m_nScore = nScore; }							//新しい時間を設定
	void SetPos(D3DXVECTOR3 pos) override {}										//位置の設定

	//----------------
	// ゲッター
	//----------------
	D3DXVECTOR3 GetPosition() override { return D3DXVECTOR3(0.0f, 0.0f, 0.0f); }	//位置の取得
	D3DXVECTOR3 GetPosOld() override { return D3DXVECTOR3(0.0f, 0.0f, 0.0f); }		//位置の取得
	float GetWidth() override { return 0.0f; }										//幅の取得
	float GetHeight() override { return 0.0f; }										//高さの取得

	//------------------
	// 静的メンバ変数
	//------------------
	static CRanking* Create();

private:
	//------------------
	// 定数
	//------------------
	static const int nMaxRanking = 5;	//表示するランキングの最大数

	//------------------
	// メンバ変数
	//------------------
	int	m_nRankUpdate;				//更新ランクNo.
	CScore*	m_pScore[nMaxRanking];	//スコア

	//------------------
	// 静的メンバ変数
	//------------------
	static int m_nScore;	//スコア
};

#endif